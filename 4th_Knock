# -*- coding: utf-8 -*-
"""
Created on Fri Dec 13 00:13:23 2019

@author: shunsuke
()
print()
"""

import pandas as pd
uselog = pd.read_csv("use_log.csv")
a=uselog.isnull().sum()

customer = pd.read_csv("customer_join.csv")
b=customer.isnull().sum()

customer_clustering = customer[["mean","median","max","min","membership_period"]]

from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
customer_clustering_sc = sc.fit_transform(customer_clustering)

model_kmeans = KMeans(n_clusters=4,random_state=0)
clusters = model_kmeans.fit(customer_clustering_sc)
customer_clustering["cluster"] = clusters.labels_
print(customer_clustering["cluster"].unique())

a=customer_clustering.groupby("cluster").mean()


from sklearn.decomposition import PCA  #主成分分析、次元削減
X = customer_clustering_sc
pca = PCA(n_components=2) #主成分分析を行うモデル
pca.fit(X) #pcaはモデルの名前,このモデルをＸに適用する
x_pca = pca.transform(X)#データを主成分空間に写像
pca_df = pd.DataFrame(x_pca)
pca_df["cluster"] = customer_clustering["cluster"]

import matplotlib.pyplot as plt
for i in customer_clustering["cluster"].unique():
    tmp = pca_df.loc[pca_df["cluster"]==i]
    plt.scatter(tmp[0],tmp[1])
    
customer_clustering = pd.concat([customer_clustering,customer],axis=1)
check=customer_clustering.groupby(["cluster","routine_flg"],as_index=False).count()\
[["cluster","routine_flg","customer_id"]]

uselog["usedate"] = pd.to_datetime(uselog["usedate"])
uselog["YM"] = uselog["usedate"].dt.strftime("%Y%m")
uselog_months = uselog.groupby(["YM","customer_id"],as_index=False).count()
uselog_months.rename(columns={"log_id":"count"}, inplace=True)
del uselog_months["usedate"]

year_months = list(uselog_months["YM"].unique())
predict_data = pd.DataFrame()
for i in range(6, len(year_months)):
    tmp = uselog_months.loc[uselog_months["YM"] == year_months[i]]
    tmp.rename(columns={"count":"count_pred"},inplace=True)
    for j in range(1,7):
        tmp_before = uselog_months.loc[uselog_months["YM"]==year_months[i-j]]
        del tmp_before["YM"]
        tmp_before.rename(columns={"count":"count_{}".format(j-1)},inplace=True)
        tmp = pd.merge(tmp,tmp_before,on="customer_id",how="left")
        
    predict_data = pd.concat([predict_data,tmp],ignore_index=True)
